generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  username     String   @unique
  email        String   @unique
  password     String
  avatar       String?
  steamId      String? @unique
  discordId    String? @unique
  balance      Float    @default(0)
  rating       Float    @default(0)
  totalSales   Int      @default(0)
  joinDate     DateTime @default(now())
  isVerified   Boolean  @default(false)
  isBanned     Boolean  @default(false)
  isAdmin      Boolean  @default(false)
  products     Product[]
  orders       Order[]  @relation("UserOrders")
  reviews      Review[] @relation("UserReviews")
  questions    Question[]
  notifications Notification[]
  wallet       Wallet?
  ordersVendidos Order[] @relation("UserOrdersVendidos")
  reviewsComprador Review[] @relation("UserReviewsComprador")
  sentMessages ChatMessage[] @relation("UserSentMessages")
  favorites    Favorite[]
  highlights   Highlight[]
  reports      Report[]
  twofa        Boolean   @default(false)
  kyc          Boolean   @default(false)
  pix          String?
  logs         Log[]
  affiliates   Affiliate[]
  feedbacksGiven     Feedback[] @relation("FeedbackFromUser")
  feedbacksReceived  Feedback[] @relation("FeedbackToUser")
  feedbacksReported  Feedback[] @relation("FeedbackReportedBy")
}

model Category {
  id           String   @id @default(uuid())
  name         String
  slug         String   @unique
  icon         String
  description  String
  subcategories Subcategory[]
  products     Product[]
}

model Subcategory {
  id           String   @id @default(uuid())
  name         String
  slug         String
  category     Category @relation(fields: [categoryId], references: [id])
  categoryId   String
  products     Product[]
  emoji        String?  // Emoji representando a subcategoria

  @@unique([name, categoryId])
}

model Product {
  id           String   @id @default(uuid())
  title        String
  description  String
  price        Float
  images       String[]
  category     Category @relation(fields: [categoryId], references: [id])
  categoryId   String
  subcategory  Subcategory @relation(fields: [subcategoryId], references: [id])
  subcategoryId String
  type         String
  seller       User     @relation(fields: [sellerId], references: [id])
  sellerId     String
  stock        Int?
  isActive     Boolean  @default(true)
  hasAutoDelivery Boolean @default(false)
  deliveryType String?
  deliveryContent String?
  guarantee    String?
  status       String   @default("available")
  variations   ProductVariation[]
  subscriptionPlans SubscriptionPlan[]
  reviews      Review[]
  questions    Question[]
  orders       Order[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  views        Int      @default(0)
  likes        Int      @default(0)
  rating       Float    @default(0)
  totalReviews Int      @default(0)
  favorites    Favorite[]
  highlights   Highlight[]
}

model ProductVariation {
  id           String   @id @default(uuid())
  name         String
  price        Float
  description  String
  stock        Int?
  product      Product  @relation(fields: [productId], references: [id])
  productId    String
  subscriptionPlans SubscriptionPlan[]
  orders       Order[] @relation("VariationOrders")
}

model SubscriptionPlan {
  id           String   @id @default(uuid())
  name         String
  duration     String
  price        Float
  autoRenew    Boolean  @default(false)
  product      Product? @relation(fields: [productId], references: [id])
  productId    String?
  variation    ProductVariation? @relation(fields: [variationId], references: [id])
  variationId  String?
  orders       Order[] @relation("PlanOrders")
}

model Order {
  id           String   @id @default(uuid())
  product      Product  @relation(fields: [productId], references: [id])
  productId    String
  buyer        User     @relation("UserOrders", fields: [buyerId], references: [id])
  buyerId      String
  seller       User     @relation("UserOrdersVendidos", fields: [sellerId], references: [id])
  sellerId     String
  variation    ProductVariation? @relation("VariationOrders", fields: [variationId], references: [id])
  variationId  String?
  subscriptionPlan SubscriptionPlan? @relation("PlanOrders", fields: [subscriptionPlanId], references: [id])
  subscriptionPlanId String?
  amount       Float
  status       String
  paymentMethod String
  deliveryContent String?
  createdAt    DateTime @default(now())
  completedAt  DateTime?
  chatMessages ChatMessage[]
  dispute      Dispute?
  feedbacks    Feedback[]
}

model Notification {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  type         String
  title        String
  message      String
  read         Boolean  @default(false)
  actionUrl    String?
  createdAt    DateTime @default(now())
}

model Review {
  id           String   @id @default(uuid())
  product      Product  @relation(fields: [productId], references: [id])
  productId    String
  buyer        User     @relation("UserReviewsComprador", fields: [buyerId], references: [id])
  buyerId      String
  seller       User     @relation("UserReviews", fields: [sellerId], references: [id])
  sellerId     String
  rating       Int
  comment      String
  createdAt    DateTime @default(now())
}

model Question {
  id           String   @id @default(uuid())
  product      Product  @relation(fields: [productId], references: [id])
  productId    String
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  question     String
  answer       String?
  createdAt    DateTime @default(now())
  answeredAt   DateTime?
}

model ChatMessage {
  id           String   @id @default(uuid())
  order        Order    @relation(fields: [orderId], references: [id])
  orderId      String
  sender       User     @relation("UserSentMessages", fields: [senderId], references: [id])
  senderId     String
  message      String
  type         String
  createdAt    DateTime @default(now())
}

model Dispute {
  id           String   @id @default(uuid())
  order        Order    @relation(fields: [orderId], references: [id])
  orderId      String @unique
  reason       String
  description  String
  evidence     String[]
  status       String
  resolution   String?
  createdAt    DateTime @default(now())
  resolvedAt   DateTime?
}

model Wallet {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @unique
  balance      Float    @default(0)
  transactions Transaction[]
}

model Transaction {
  id           String   @id @default(uuid())
  wallet       Wallet   @relation(fields: [walletId], references: [id])
  walletId     String
  type         String
  amount       Float
  status       String
  createdAt    DateTime @default(now())
}

model Favorite {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

model Highlight {
  id         String   @id @default(uuid())
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  plan       String   // Ex: "7d", "15d", "30d"
  startDate  DateTime @default(now())
  endDate    DateTime
  status     String   @default("active")
  createdAt  DateTime @default(now())
}

model Report {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  title       String
  description String
  type        String
  attachment  String?
  createdAt   DateTime @default(now())
  status      String   @default("pendente")
}

model Log {
  id        String   @id @default(uuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  type      String   // Ex: 'login', 'admin', 'erro', 'acesso', etc
  message   String
  meta      Json?
  createdAt DateTime @default(now())
}

model Integration {
  id        String   @id @default(uuid())
  name      String
  type      String
  status    String   @default("Ativo")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Affiliate {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  link         String   @unique
  clicks       Int      @default(0)
  conversions  Int      @default(0)
  total        Float    @default(0)
  withdrawals  Int      @default(0)
  rule         String   @default("5%")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model AdminChat {
  id        String         @id @default(uuid())
  name      String
  messages  AdminMessage[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model AdminMessage {
  id        String     @id @default(uuid())
  chat      AdminChat  @relation(fields: [chatId], references: [id])
  chatId    String
  from      String
  text      String
  date      String
  createdAt DateTime   @default(now())
}

model Feedback {
  id           String   @id @default(uuid())
  order        Order    @relation(fields: [orderId], references: [id])
  orderId      String
  fromUser     User     @relation("FeedbackFromUser", fields: [fromUserId], references: [id])
  fromUserId   String
  toUser       User     @relation("FeedbackToUser", fields: [toUserId], references: [id])
  toUserId     String
  rating       Int      // 1-5 estrelas
  type         String   // positivo, neutro, negativo (derivado do rating)
  comment      String
  createdAt    DateTime @default(now())
  status       String   @default("active") // active, reported, removed
  reportedBy   User?    @relation("FeedbackReportedBy", fields: [reportedById], references: [id])
  reportedById String?
  isAutomatic  Boolean  @default(false)
}

model SteamTrade {
  id             String   @id @default(uuid())
  productId      String?  // Preencher após cadastro do produto
  steamItemId    String
  itemName       String
  gameId         String
  subcategoryId  String
  tradeId        String   @unique
  status         String   // aguardando_entrega, recebido, cancelado
  botInventorySlot String?
  createdAt      DateTime @default(now())
} 