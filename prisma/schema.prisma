generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid())
  steamId         String?  @unique
  email           String?  @unique
  password        String?
  name            String?
  nickname        String?
  verified        Boolean  @default(false)
  photo           String?
  accountType     String   // comprador, vendedor, admin
  reputation      Int      @default(0)
  status2FA       Boolean  @default(false)
  documentSent    Boolean  @default(false)
  pixKey          String?
  products        Product[]
  orders          Order[]  @relation("UserOrders")
  reviews         Review[] @relation("UserReviews")
  notifications   Notification[]
  wallet          WalletTransaction[]
  chatMessages    ChatMessage[]
  logs            Log[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Product {
  id              String   @id @default(uuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  title           String
  description     String
  images          Json?
  price           Float
  warranty        String?
  type            String   // skin, conta, key, jogo, servico, assinatura
  categoryId      String
  category        Category @relation(fields: [categoryId], references: [id])
  subcategoryId   String?
  subcategory     Subcategory? @relation(fields: [subcategoryId], references: [id])
  stock           Int      @default(1)
  variations      Json?
  plans           Json?
  autoDelivery    String?
  active          Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  orders          Order[]
}

model Category {
  id              String   @id @default(uuid())
  name            String
  slug            String  @unique
  products        Product[]
  subcategories   Subcategory[]
}

model Subcategory {
  id              String   @id @default(uuid())
  name            String
  slug            String  @unique
  categoryId      String
  category        Category @relation(fields: [categoryId], references: [id])
  products        Product[]
}

model Order {
  id                String   @id @default(uuid())
  buyerId           String
  buyer             User     @relation("UserOrders", fields: [buyerId], references: [id])
  productId         String
  product           Product  @relation(fields: [productId], references: [id])
  selectedVariation Json?
  selectedPlan      String?
  status            String   // pago, entregue, em_disputa, cancelado
  deliveryId        String?  @unique
  delivery          Delivery? @relation(fields: [deliveryId], references: [id])
  review            Review?
  reviewId          String?  @unique
  purchaseDate      DateTime @default(now())
  chatRoom          ChatRoom?
}

model Delivery {
  id          String   @id @default(uuid())
  type        String   // texto, link, arquivo, skin_bot
  content     String
  status      String
  expiration  DateTime?
  downloadURL String?
  order       Order?
}

model WalletTransaction {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      String   // venda, saque, compra, taxa
  value     Float
  status    String
  createdAt DateTime @default(now())
}

model ChatRoom {
  id        String   @id @default(uuid())
  orderId   String?  @unique
  order     Order?   @relation(fields: [orderId], references: [id])
  messages  ChatMessage[]
  createdAt DateTime @default(now())
}

model ChatMessage {
  id        String   @id @default(uuid())
  roomId    String
  room      ChatRoom @relation(fields: [roomId], references: [id])
  senderId  String
  sender    User     @relation(fields: [senderId], references: [id])
  content   String
  createdAt DateTime @default(now())
}

model Review {
  id        String   @id @default(uuid())
  order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String   @unique
  sellerId  String
  seller    User     @relation("UserReviews", fields: [sellerId], references: [id])
  stars     Int
  comment   String
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  title     String
  body      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      String
  link      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Log {
  id        String   @id @default(uuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  action    String
  details   String?
  createdAt DateTime @default(now())
} 