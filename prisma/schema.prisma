generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(uuid())
  username          String         @unique
  email             String         @unique
  password          String
  avatar            String?
  steamId           String?        @unique
  balance           Float          @default(0)
  rating            Float          @default(0)
  totalSales        Int            @default(0)
  joinDate          DateTime       @default(now())
  isVerified        Boolean        @default(false)
  isBanned          Boolean        @default(false)
  discordId         String?        @unique
  kyc               Boolean        @default(false)
  pix               String?
  twofa             Boolean        @default(false)
  isAdmin           Boolean        @default(false)
  discordAvatar     String?
  discordUsername   String?
  steamAvatar       String?
  steamUsername     String?
  affiliates        Affiliate[]
  sentMessages      ChatMessage[]  @relation("UserSentMessages")
  favorites         Favorite[]
  feedbacksGiven    Feedback[]     @relation("FeedbackFromUser")
  feedbacksReported Feedback[]     @relation("FeedbackReportedBy")
  feedbacksReceived Feedback[]     @relation("FeedbackToUser")
  highlights        Highlight[]
  logs              Log[]
  notifications     Notification[]
  orders            Order[]        @relation("UserOrders")
  ordersVendidos    Order[]        @relation("UserOrdersVendidos")
  products          Product[]
  questions         Question[]
  reports           Report[]
  reviewsComprador  Review[]       @relation("UserReviewsComprador")
  reviews           Review[]       @relation("UserReviews")
  wallet            Wallet?
  socialLinks       SocialLink[]
}

model Category {
  id            String        @id @default(uuid())
  name          String
  slug          String        @unique
  icon          String
  description   String
  products      Product[]
  subcategories Subcategory[]
}

model Subcategory {
  id         String    @id @default(uuid())
  name       String
  slug       String
  categoryId String
  emoji      String?
  products   Product[]
  category   Category  @relation(fields: [categoryId], references: [id])

  @@unique([name, categoryId])
}

model Product {
  id                String             @id @default(uuid())
  title             String
  description       String
  price             Float
  images            String[]
  categoryId        String
  subcategoryId     String
  type              String
  sellerId          String
  stock             Int?
  isActive          Boolean            @default(true)
  hasAutoDelivery   Boolean            @default(false)
  deliveryType      String?
  deliveryContent   String?
  guarantee         String?
  status            String             @default("available")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  views             Int                @default(0)
  likes             Int                @default(0)
  rating            Float              @default(0)
  totalReviews      Int                @default(0)
  highlighted       Boolean            @default(false)
  favorites         Favorite[]
  highlights        Highlight[]
  orders            Order[]
  category          Category           @relation(fields: [categoryId], references: [id])
  seller            User               @relation(fields: [sellerId], references: [id])
  subcategory       Subcategory        @relation(fields: [subcategoryId], references: [id])
  variations        ProductVariation[]
  questions         Question[]
  reviews           Review[]
  subscriptionPlans SubscriptionPlan[]
}

model ProductVariation {
  id                String             @id @default(uuid())
  name              String
  price             Float
  description       String
  stock             Int?
  productId         String
  orders            Order[]            @relation("VariationOrders")
  product           Product            @relation(fields: [productId], references: [id])
  subscriptionPlans SubscriptionPlan[]
}

model SubscriptionPlan {
  id          String            @id @default(uuid())
  name        String
  duration    String
  price       Float
  autoRenew   Boolean           @default(false)
  productId   String?
  variationId String?
  orders      Order[]           @relation("PlanOrders")
  product     Product?          @relation(fields: [productId], references: [id])
  variation   ProductVariation? @relation(fields: [variationId], references: [id])
}

model Order {
  id                 String            @id @default(uuid())
  productId          String
  buyerId            String
  sellerId           String
  variationId        String?
  subscriptionPlanId String?
  amount             Float
  status             String
  paymentMethod      String
  deliveryContent    String?
  createdAt          DateTime          @default(now())
  completedAt        DateTime?
  chatMessages       ChatMessage[]
  dispute            Dispute?
  feedbacks          Feedback[]
  buyer              User              @relation("UserOrders", fields: [buyerId], references: [id])
  product            Product           @relation(fields: [productId], references: [id])
  seller             User              @relation("UserOrdersVendidos", fields: [sellerId], references: [id])
  subscriptionPlan   SubscriptionPlan? @relation("PlanOrders", fields: [subscriptionPlanId], references: [id])
  variation          ProductVariation? @relation("VariationOrders", fields: [variationId], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String
  title     String
  message   String
  read      Boolean  @default(false)
  actionUrl String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  productId String
  buyerId   String
  sellerId  String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  buyer     User     @relation("UserReviewsComprador", fields: [buyerId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  seller    User     @relation("UserReviews", fields: [sellerId], references: [id])
}

model Question {
  id         String    @id @default(uuid())
  productId  String
  userId     String
  question   String
  answer     String?
  createdAt  DateTime  @default(now())
  answeredAt DateTime?
  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id])
}

model ChatMessage {
  id        String   @id @default(uuid())
  orderId   String
  senderId  String
  message   String
  type      String
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id])
  sender    User     @relation("UserSentMessages", fields: [senderId], references: [id])
}

model Dispute {
  id          String    @id @default(uuid())
  orderId     String    @unique
  reason      String
  description String
  evidence    String[]
  status      String
  resolution  String?
  createdAt   DateTime  @default(now())
  resolvedAt  DateTime?
  order       Order     @relation(fields: [orderId], references: [id])
}

model Wallet {
  id           String        @id @default(uuid())
  userId       String        @unique
  balance      Float         @default(0)
  transactions Transaction[]
  user         User          @relation(fields: [userId], references: [id])
}

model Transaction {
  id        String   @id @default(uuid())
  walletId  String
  type      String
  amount    Float
  status    String
  createdAt DateTime @default(now())
  wallet    Wallet   @relation(fields: [walletId], references: [id])
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
}

model Highlight {
  id        String   @id @default(uuid())
  productId String
  userId    String
  plan      String
  startDate DateTime @default(now())
  endDate   DateTime
  status    String   @default("active")
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Report {
  id          String   @id @default(uuid())
  userId      String
  title       String
  description String
  type        String
  attachment  String?
  createdAt   DateTime @default(now())
  status      String   @default("pendente")
  user        User     @relation(fields: [userId], references: [id])
}

model Log {
  id        String   @id @default(uuid())
  userId    String?
  type      String
  message   String
  meta      Json?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}

model Integration {
  id        String   @id @default(uuid())
  name      String
  type      String
  status    String   @default("Ativo")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Affiliate {
  id          String   @id @default(uuid())
  userId      String
  link        String   @unique
  clicks      Int      @default(0)
  conversions Int      @default(0)
  total       Float    @default(0)
  withdrawals Int      @default(0)
  rule        String   @default("5%")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model AdminChat {
  id        String         @id @default(uuid())
  name      String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  messages  AdminMessage[]
}

model AdminMessage {
  id        String    @id @default(uuid())
  chatId    String
  from      String
  text      String
  date      String
  createdAt DateTime  @default(now())
  chat      AdminChat @relation(fields: [chatId], references: [id])
}

model Feedback {
  id           String   @id @default(uuid())
  orderId      String
  fromUserId   String
  toUserId     String
  rating       Int
  type         String
  comment      String
  createdAt    DateTime @default(now())
  status       String   @default("active")
  reportedById String?
  isAutomatic  Boolean  @default(false)
  fromUser     User     @relation("FeedbackFromUser", fields: [fromUserId], references: [id])
  order        Order    @relation(fields: [orderId], references: [id])
  reportedBy   User?    @relation("FeedbackReportedBy", fields: [reportedById], references: [id])
  toUser       User     @relation("FeedbackToUser", fields: [toUserId], references: [id])
}

model SteamTrade {
  id               String   @id
  productId        String?
  steamItemId      String
  itemName         String
  gameId           String
  subcategoryId    String
  tradeId          String   @unique
  status           String
  botInventorySlot String?
  createdAt        DateTime @default(now())
}

model SocialLink {
  id         String   @id @default(uuid())
  userId     String
  provider   String   // 'steam', 'discord', etc.
  providerId String   // id do usuário no provedor
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerId])
}
